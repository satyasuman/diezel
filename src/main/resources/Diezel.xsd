<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://diezel.ericaro.net/2.0.1/" xmlns="http://diezel.ericaro.net/2.0.1/"
	elementFormDefault="qualified">

<!-- 
changes:
2.0.1 : added attribute "resolved" for the generic type.
 -->

<xs:simpleType name="javaIdentifier">
  <xs:restriction base="xs:string">
    <xs:pattern value="[_a-zA-Z]([_a-zA-Z0-9])*"/>
  </xs:restriction>
</xs:simpleType>
<xs:simpleType name="qname">
  <xs:restriction base="xs:string">
    <xs:pattern value="[_a-zA-Z]([_a-zA-Z0-9])*(\.[_a-zA-Z]([_a-zA-Z0-9])*)*"/>
  </xs:restriction>
</xs:simpleType>
<xs:simpleType name="path">
  <xs:restriction base="qname"/>
</xs:simpleType>
<xs:simpleType name="alias">
  <xs:restriction base="javaIdentifier"/>
</xs:simpleType>


	<xs:complexType name="generic">
		<xs:annotation>
			<xs:documentation source="description">generic defines a generic type ( like "U extends V").
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" type="javaIdentifier" use="required">
			<xs:annotation>
				<xs:documentation source="description">
					generic type name, usually
					U or V
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="resolved" type="qname">
			<xs:annotation>
				<xs:documentation source="description">
					This transition does not "compute" this target generic, but fix it. For instance
					public State&lt;String> named();
					where some other code might do something like
					public State&lt;T> named(&lt;T> type);
					To generate the first one just set resolved="java.lang.String"
					To generate the last one do not add any options.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="super" type="xs:string">
			<xs:annotation>
				<xs:documentation source="description">
					type that follow the super
					in the java generic syntax.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="extends" type="xs:string">
			<xs:annotation>
				<xs:documentation source="description">
					type that follow the
					extends in the java generic syntax.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>



	<xs:element name="package" type="qname">
		<xs:annotation>
			<xs:documentation source="description">Fully qualified package name.</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:element name="name" type="javaIdentifier">
		<xs:annotation>
			<xs:documentation source="description">Java class name that:
 - defines the language itself (along with it's package name)
 - is the class name for the starting state.
 - is the base for state naming convention

Should be a valid java identifier.
</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:element name="states">
		<xs:annotation>
			<xs:documentation source="description">declare the list of states</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="state" minOccurs="1" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation source="description">Override the state's name denoted by its "path".
the path, is a dot-separated list of transition's aliases.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="javaIdentifier">
								<xs:attribute name="path" type="path" use="required">
									<xs:annotation>
										<xs:documentation source="description">
											the path to the state you want to fix the name.
											
											the path is a dot separated list of aliases to reach the state.
										</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:element name="transition">
		<xs:annotation>
			<xs:documentation source="description">A transition  is a  method call that is used to
				chain methods.
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="javadoc" type="xs:string"
					default="EDSL transition generated with Diezel" minOccurs="0">
					<xs:annotation>
						<xs:documentation source="description">
							javadoc content without
							the /* and */
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="captures" minOccurs="0" maxOccurs="1">
					<xs:annotation>
						<xs:documentation source="description">
							capture a generic type to
							the next state.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="capture" type="generic" minOccurs="1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="drops" minOccurs="0" maxOccurs="1">
					<xs:annotation>
						<xs:documentation source="description">
							drop a generic type when moving to the next step.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="drop" type="generic"  minOccurs="1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="return" type="xs:string" default="void"
					minOccurs="0" maxOccurs="1">
					<xs:annotation>
						<xs:documentation source="description">
							the actual return type
							when this transition reaches the last state of the graph.
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="signature" type="xs:string" minOccurs="1"
					maxOccurs="1">
					<xs:annotation>
						<xs:documentation source="description">
							the actual method like:
							"signature name(types) throws Exceptions"
						</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:all>
			<xs:attribute name="name" type="alias" use="required">
				<xs:annotation>
					<xs:documentation source="description">
						the transition name or
						alias, as it is referenced in the language expression.
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name="transitionImplementation">
		<xs:annotation>
			<xs:documentation source="description">A transitionImplementation adds body java code to the language's
transition.
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="body" type="xs:string" minOccurs="1" />
			</xs:all>
			<xs:attribute name="name" type="alias" use="required">
				<xs:annotation>
					<xs:documentation source="description">
						the transition name or
						alias, as it is referenced in the language expression.
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>

	<xs:element name="diezel">
		<xs:annotation>
			<xs:documentation source="description">Diezel element defines a single Diezel language.

A Diezel Language is a set of interfaces that fully defines
state/transition network of chained methods.

A Diezel language does not provide any implementation. Just
the definition of  this network.

Transitions are defined as XML Element transitions.
The network layout is described using a regular expression.
States are deduced from the regular expression.

It is possible to override the default state name 
given the state path to it.
</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="package" minOccurs="1" maxOccurs="1"/>
				<xs:element name="header" type="xs:string" minOccurs="0" maxOccurs="1">
					<xs:annotation>
						<xs:documentation source="description">header string for every generated file.
						without the /* */ symbols
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="captures" minOccurs="0" maxOccurs="1">
					<xs:annotation>
						<xs:documentation source="description">add a generic to be captured by this transition, 
and append it to the next state.
for instance a call like
"public &lt;T> State&lt;T> with(class&lt;T> type);"

captures the generic "T".
					</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="capture" type="generic" minOccurs="1" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="name" minOccurs="1" maxOccurs="1">
					<xs:annotation>
						<xs:documentation>The java name for this language, or language implementation.
</xs:documentation>
					</xs:annotation></xs:element>
				<xs:element name="expression" type="xs:string" minOccurs="1" maxOccurs="1">
					<xs:annotation>
						<xs:documentation source="description">the regular expression that defines the state/transition network.
example: "a|b,c,d?, e*"
See Diezel site for available operators.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="transitions" minOccurs="1" maxOccurs="1">
					<xs:annotation>
						<xs:documentation source="description">Transitions that defines this language.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="transition" minOccurs="1" maxOccurs="unbounded" />
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="states" minOccurs="0" maxOccurs="1" >
					<xs:annotation>
						<xs:documentation>states are self defined by the regular expression. Here you can overwrite
those definitions, mapping every state by its path.</xs:documentation>
					</xs:annotation></xs:element>
			</xs:all>
		</xs:complexType>
	</xs:element>

	<xs:element name="diezelImplementation">
		<xs:annotation>
			<xs:documentation source="description">Diezel Implementation defines
an Implementation for a Diezel language.

A Diezel Implementation is a set of classes that implements
the one or the language, and whose methods are the transitionss
as defined in the language.

The responsibility for the implementation is to provide
methods' body for every transitions.
</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="extends" type="xs:string" minOccurs="0" />
				<xs:element name="implements" type="qname" minOccurs="1">
					<xs:annotation>
						<xs:documentation source="description">
							a qualified name to the
							diezel language that it implements.
							A qualified name is the java
							qualified name of the the first Guide
							for the language:
							net.ericaro.diezel.MyGuide
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="package" minOccurs="1" />
				<xs:element ref="name" minOccurs="0" />
				<xs:element name="transitions" minOccurs="1">
					<xs:annotation>
						<xs:documentation source="description">
							the set of transition,
							that
							are referenced in the language expression
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="transitionImplementation" minOccurs="1"
								maxOccurs="unbounded" />
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:all>
		</xs:complexType>
	</xs:element>
</xs:schema>
