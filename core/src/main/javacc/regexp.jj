PARSER_BEGIN(RegExp)package net.ericaro.diezel.core.graph;import java.io.StringReader;import java.util.Deque;import java.util.LinkedList;import java.util.Map;import net.ericaro.diezel.core.State;import net.ericaro.diezel.core.Transition;class RegExp {  static Token t;  static boolean init= false;  static Graph<State,Transition> g;  public static <State, Transition> Graph<State, Transition> parse(String code) throws ParseException{      if (!init)      {        new RegExp(new StringReader(code));        init = true;      }      else RegExp.ReInit(new StringReader(code));      try{      g=RegExp.Exp();      g.reduce();      return (Graph<State, Transition>) g;      }      finally{          g=null;      }    }}PARSER_END(RegExp)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      "*"    | ~[ "*", "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN :{  < STAR : "*" >| < PLUS : "+" >| < OPT : "?" >| < BANG : "&" >| < SEL : "|" >| < SEQ : "," >| < LEFT : "(" >| < RIGHT : ")" >| <#SYMBOL : [ "a"-"z", "A"-"Z", "_", "<", ">" ] >| < IDENTIFIER : (< SYMBOL >)+ >}Graph Exp() :{Graph g0;}{  g0 = Sel()    (    < SEQ > g = Sel()    {      g0 = Graph.seq(g0, g);    }  )*  {return g0;  }}Graph Sel() :{Graph g0;}{  g0 = Bang()  (    < SEL > g = Bang()    {      g0 = Graph.sel(g0, g);    }  )*  {return g0;}}Graph Bang() :{Deque < Graph > queue = new LinkedList < Graph > ();}{  g = Unary()  {    queue.push(g);  }  (    < BANG > g = Unary()    {      queue.push(g);    }  )*  {    return Graph.bang(queue.toArray(new Graph [queue.size()]));  }}Graph Unary() :{}{  (    < LEFT > g = Exp() < RIGHT >  | t = < IDENTIFIER >    {      g = Graph.term(t.image);    }  )  (    < STAR >    {      return Graph.iter(g);    }  | < PLUS >    {      return Graph.iter_once(g);    }  | < OPT >    {      return Graph.opt(g);    }  )?  {    return g;  }}
